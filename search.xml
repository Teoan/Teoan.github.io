<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[利用Github上的Webhooks实现网站自动化部署]]></title>
    <url>%2F2019%2F11%2F18%2F%E5%88%A9%E7%94%A8Github%E4%B8%8A%E7%9A%84Webhooks%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[前言由于本人的hexo博客是提交到GitHub上的，每一次更新博客都得在服务器上面手动pull更新，这样就显得十分蛋疼。所以Google了一下我的需求，发现了Github上的Webhooks功能，为此记录下我实现的过程。 安装依赖由于Webhooks使用的是NodeJS，所以需要安装npm等相关的依赖。 12sudo apt-get install nodejssudo apt-get install npm 安装webhooks后端服务所需要的组件安装github-webhook-handler 1npm i -S github-webhook-handler 安装node进程管理工具pm2 1npm i -g pm2 创建自动化部署脚本文件deploy.sh在自定义目录下创建deploy脚本实现自动化部署，内容如下： 12345echo "start deployment"cd /home/xxx/xxx.github.iogit fetch --allgit reset --hard origin/masterecho "done" 运行时如果会出现： 1cd: can&#39;t cd to &#x2F;home&#x2F;xxx&#x2F;xxx.github.io 原因可能是你的shell脚本在window上编写的，这样的话到linux系统运行时就会出现编码格式问题，window为dos而linux为unix。解决：使用vim更改文件格式。 1vim deploy.sh 查看文件格式： 1:set ff 更改文件格式为unix： 123:set ff&#x3D;unix或者:set fileformat&#x3D;unix 创建Webhook后端运行代码在上文deploy.sh文件同一目录下创建webhook.js文件，内容如下 123456789101112131415161718192021222324252627var http = require('http')var createHandler = require('github-webhook-handler')var handler = createHandler(&#123; path: '/auto_deploy', secret: 'xxxx' &#125;)// 上面的 secret 在配置Github上webhook时需要用到function run_cmd(cmd, args, callback) &#123; var spawn = require('child_process').spawn; var child = spawn(cmd, args); var resp = ""; child.stdout.on('data', function(buffer) &#123; resp += buffer.toString(); &#125;); child.stdout.on('end', function() &#123; callback (resp) &#125;);&#125;http.createServer(function (req, res) &#123; handler(req, res, function (err) &#123; res.statusCode = 404 res.end('no such location') &#125;)&#125;).listen(10000)//监听本地10000端口handler.on('error', function (err) &#123; console.error('Error:', err.message)&#125;)handler.on('push', function (event) &#123; console.log('Received a push event for %s to %s', event.payload.repository.name, event.payload.ref); run_cmd('sh', ['./deploy.sh',event.payload.repository.name], function(text)&#123; console.log(text) &#125;);&#125;)//deploy.sh为自动化部署的脚本文件 使用pm2进程管理器运行webhook.js1pm2 start webhook.js 如果在运行的时候如果提示 github-webhook-handler is not defined 未找到 ，可以在目录中执行 npm link github-webhook-handler。可以使用以下命令查看端口是否正常使用： 1netstat -tlnp|grep 10000 正常结果如下图： 目前为止，一切顺利的话，webhook就在服务器上跑了起来，如果需要映射到公网的80端口，那么需要配置一下Nginx反向代理。 配置Nginx配置Nginx使访问网站80端口的/auto_deployURL转发到本地的10000端口，在/etc/nginx/nginx.conf文件中加入如下配置： 123456789server&#123; # 80端口是http正常访问的接口 listen 80; server_name xxx.com; location &#x2F;auto_deploy &#123; proxy_pass http:&#x2F;&#x2F;127.0.0.1:10000; &#125;&#125; 重启Nginx： 1sudo systemctl restart nginx.service 配置Github上的Webhook进入Github项目地址，点击设置按钮，找到Webhooks，进行如下配置：其中，Secret项需要和webhook.js文件中的保持一致，Content type 选择application/json。不出意外的话可以看到最近提交是否成功。]]></content>
      <categories>
        <category>Git</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于ASP.NET中Ajax请求错误的问题]]></title>
    <url>%2F2019%2F11%2F16%2F%E5%85%B3%E4%BA%8EASP.NET%E4%B8%ADAjax%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[记录下自己做作业时遇到的问题。 在ASP.NET中使用Jquery+Ajax请求时发生身份验证错误错误如下图所示： 解决：找到APP_Start文件夹，更改RouteConfig.cs中AutoRedirectMode的配置。原本为: 1settings.AutoRedirectMode = RedirectMode.Permanent; 改为： 1settings.AutoRedirectMode = RedirectMode.Off;]]></content>
      <categories>
        <category>ASP.NET</category>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录一下Java Web项目遇到的问题]]></title>
    <url>%2F2019%2F09%2F21%2F%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BJava%20Web%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言最近对Java Web应用感兴趣，之前从来没接触过，所以写了篇博文记录自己遇到的问题和解决办法，便于自己回顾复习。 关于反射机制中的BeanUtils开发包在利用BeanUtils开发包封装数据到Bean对象的过程中，特殊对象日期不能直接封装到Bean对象中，需要手动注册一个日期转换器对Date对象进行转换。 1ConvertUtils.register(new DateLocaleConverter(), Date.class); 如果按照上面的代码，则会出现类似错误 1org.apache.commons.beanutils.ConversionException: Error parsing date '2019-10-10' at position=4 原因是没有给转换器设置对应的地区区域日期格式。查看源码发现DateLocaleConverter类有构造函数DateLocaleConverter(Locale locale, String pattern)，最终解决方法： 123DateLocaleConverter converter = new DateLocaleConverter(Locale.getDefault(),"yyyy-MM-dd");converter.setLenient(true);//实现日期自动转换，如输入类似'2019-14-30'的日期时，会自动转换成'2020-03-1'ConvertUtils.register(converter, Date.class); 关于C3P0连接池的配置和使用使用C3P0连接池链接数据库进行增删改查时出现警告： 1com.mchange.v2.c3p0.cfg.C3P0Config.getUnspecifiedUserProperties named-config with name 'mysql' does not exist. Using default-config. 并抛出异常： 1java.sql.SQLException: No suitable driver 原因：c3p0 获取不到配置文件的内容，使用了默认配置，导致找不到对应的数据库链接。解决办法： 检查xml配置文件中的driverClass和jdbcUr是否写错。 检查c3p0-config.xml是否正确存在于src目录下。 检查c3p0-config.xml第一行是否为空。 关于Mysql插入中文时数据库显示乱码在使用c3p0连接池对中文数据进行插入时出现: 1Caused by: java.sql.SQLException: Incorrect string value: &#39;\xF0\x9F\x98\x80\xE3\x80...&#39; for column &#39;show_content&#39; at row 1 Google 了一下，原因在于Mysql中的utf-8编码是按三个字节一个单位编码的，遇到以4个字节为单位的编码的数据就会出现切割，从而出现乱码。按照网上给的解决方法： 将Mysql数据库的编码修改为utf8mb4 将数据表的编码修改为utf8mb4 修改c3p0连接池中Mysql连接配置代码 由于我使用的开发环境是idea+navicat，上述修改十分方便，然而还是不能解决我的问题。我最后的解决办法：修改表中字段的字符集为utf8mb4。 关于jsp页面无法使用EL表达式在使用String MVC开发过程中，使用Model类中的函数addAttribute向前端jsp页面传值时出现无法解析问题，抛出的异常如下： 12345java.lang.NumberFormatException: For input string: "$&#123;begin &#125;" at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:68) at java.base/java.lang.Integer.parseInt(Integer.java:644) at java.base/java.lang.Integer.valueOf(Integer.java:989) at org.apache.jasper.compiler.JspUtil.coerceToInt(JspUtil.java:560) 抛出的异常显示对字符串${begin }的格式转换错误，于是找到该变量在jsp文件中的位置如下： 12345678910&lt;c:forEach begin="$&#123;begin &#125;" end="$&#123;end &#125;" var="i"&gt; &lt;c:choose&gt; &lt;c:when test="$&#123;i eq pageInfo.pageNum &#125;"&gt; &lt;a class="page-numbers current"&gt;$&#123;i&#125;&lt;/a&gt; &lt;/c:when&gt; &lt;c:otherwise&gt; &lt;a class="page-numbers" href="$&#123;pageUrlPrefix&#125;=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt; &lt;/c:otherwise&gt; &lt;/c:choose&gt;&lt;/c:forEach&gt; 显然jsp页面无法将EL表达式中的${begin }解析为int。原因如下：使用了老的JSP 1.2 声明，在JSP 1.2 声明中EL表达式默认是关闭的。解决办法：使用新的JSP声明替换掉旧的声明。找到webapp/WEB-INF路径下的web.xml文件，将约束头替换成新的版本。各版本约束头如下： web-app 3.11234&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1"&gt; jdk版本1.7以上 web-app 3.01234&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0"&gt; jdk版本1.6以上,支持jsp-config配置 web-app 2.51234&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"&gt; jdk版本1.5以上 web-app 2.41234&lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" version="2.4"&gt;]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[总结一下毕业设计项目中所遇到的问题]]></title>
    <url>%2F2019%2F05%2F22%2F%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言经历了两个多月的时间，终于把毕业设计的要求一步一步地慢慢实现了，中间踩过的坑数不胜数，由此列出了一些遇到的问题还有解决方法。项目地址：https://github.com/Teoan/garage 在ubuntu中QtCreator无法输入中文这个和输入法的类型有关，系统中所使用的输入法为Fcitx，然而Qt自带的插件中只支持iBus输入法。解决：安装fcitx-libs-qt或fcitx-libs-qt5，在系统中找到libfcitxplatforminputcontextplugin.so这个动态库文件，复制到Qt安装目录中的/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts子目录下，重新运行程序即可解决。(注意:不同版本的Qt，插件的路径会有所不同) arm-linux-gcc 成功在Qt编译，但是上传到板子上面运行出现： .-/bin/sh: ./xxxxx: not found 解决:我用的工具链版本是4.4.3，板子上内核是用5.4.0编译的，版本不匹配，换一个5.4.0的交叉编译工具链或者比5.4.0新就可以了。 关于交叉编译工具链的选择网上查到的大多数ARM交叉编译工具链版本为4.4.3或者5.4.0，基本上4.4.3版本为32位系统的，5.4.0版本为64位的，然而现在网上资源默认你是用64位版本的系统，所以给的工具链都不会和你说是64位的，然而我用的是32位系统的，为此也遇到了许多坑。网上32位交叉编译工具链的资源比较少，要么得自己去编译，要么要一大堆积分去下载。偶然发现一家和ARM公司合作的Linaro公司,虽然是英文的但是在里面可以找到各种版本个平台的交叉编译工具，再也不用为找ARM交叉编译工具链而烦恼了。各平台各版本下载地址:https://releases.linaro.org/components/toolchain/binaries/ 在ARM板上面使用opencv时，出现: error while loading shared libraries: /lib/libm.so.6: internal error 解决:出现这个问题应该是arm板上面的openvc库的软连接弄丢了，特别是在windows交叉编译的opencv的库,重新建立软连接就可以了。 关于误删除libc.so.6删除后发现各种大多数指令都用不了，会出现没有找到动态库的情况。解决:利用 LD_PRELOAD= 指定运行时的动态库，可以暂时使用常用命令重建软连接。例如： LD_PRELOAD=/lib64/libc-2.12.so ln -s /lib64/libc-2.12.so /lib64/libc.so.6 使用easypr后识别结果为乱码 “\u00E8\u0093\u009D\u00E7\u0089\u008C:\u00E5\u00B7\u009DA88888” 解决:原本的字符串处理方式为: 1234CPlate cp =plateVec.at(0);String ret = cp.getPlateStr();QString str =QString::fromLocal8Bit(ret.c_str());ui-&gt;label-&gt;setText(str); 改为: 123CPlate cp =plateVec.at(0);cv::String ret = cp.getPlateStr();ui-&gt;label-&gt;setText(ret.c_str()); 注意:ret.c_str()实现可以从cv::String类转换为count char * ,以上做法可以实现在Qt中显示中文，但是如果输出到终端还是会有乱码问题，如果需要终端输出，用cout直接输出String就可以了。]]></content>
      <categories>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Android客户端RSA加解密后出现乱码的问题]]></title>
    <url>%2F2019%2F03%2F24%2F%E5%85%B3%E4%BA%8EAndroid%E5%AE%A2%E6%88%B7%E7%AB%AFRSA%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%90%8E%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言在项目过程中需要通过okhttp获取服务器上数据库的数据后进行RSA解密。 解密可以成功，但是前面会出现����乱码 ��������������������{“status”:0,”userName”:”Teoan”} 本以为是编码问题，但是转换成UTF-8后发现还是一样。 解决办法查找的一番资料后完美解决，在Android移动端获取解密的Cipher类时要使用Cipher.getInstance(“RSA/ECB/PKCS1Padding”); 而在服务器端应该使用Cipher.getInstance(“RSA”);来获取。 本文参考文档(https://blog.csdn.net/totcw/article/details/72820444)]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐一个特别好用的shell--zsh]]></title>
    <url>%2F2019%2F03%2F15%2F%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E7%89%B9%E5%88%AB%E5%A5%BD%E7%94%A8%E7%9A%84shell-zsh%2F</url>
    <content type="text"><![CDATA[介绍Z shell（Zsh）是一款可用作交互式登录的shell及脚本编写的命令解释器。Zsh对Bourne shell做出了大量改进，同时加入了Bash、ksh及tcsh的某些功能。 特性有 可帮助用户键入常用命令选项及参数的可编程命令行补全功能，自带对数百条命令的支持 可与任意Shell共享命令历史 可在无需运行外部程序（如find）的情况下通过 文件扩展匹配文件 改进变量/数组处理方式 拼写检查 兼容多种模式(如bash等) 等等 Oh My Zsh介绍用户社区网站”Oh My Zsh”收集Z shell的第三方插件及主题。截止于2018年，其GitHub源共有超过1000位贡献者、200多款插件和超过140款主题。同时也带有更新已安装插件及主题的自动更新工具。 zsh的安装查看一下系统中已安装的shell $ cat /etc/shells 如果没安装zsh，则需安装(以Ubuntu为例子，其他系统可自行谷歌或百度) $ sudo apt-get install zsh 查看当前使用中的shell,并切换默认shell为zsh $ echo $shell$ chsh -s /bin/zsh 注销出现登录就可以生效了。 Oh My Zsh的安装和使用Oh My Zsh项目地址安装Oh My Zsh之前，应该确保是否以安装zsh，不然回出现以下提示： Zsh is not installed! Please install zsh first! 安装Oh My Zsh wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 执行上面的命令后，Oh My Zsh就已经安装再你的系统中了，接下来可以对它进行主题配置。Oh My Zsh的主题存在于 ~/。oh-my-zsh/thems 中，可以查看Oh My Zsh自带的的多种主题文件。 配置Oh My ZshOh My Zsh的默认配置文件路径为~/.zshrc，可以编辑文件内容修改zsh主题 vim ~/.zshrc 将11行的ZSH_THEME字段的值更改为自己喜欢的主题名称，如： ZSH_THEME=”ys” 效果如下 配置完Oh My Zsh了，不过现在的zsh还不是那么的好用，它的强大在于它有许多非常方便人性化的插件，选择性地安装并使用，会让你的工作事半功倍。 Oh My Zsh插件推荐Oh My Zsh的插件非常之多，一些是Oh My Zsh自带的插件，默认情况下没有开启，修改上文提到的.zshrc文件，可以选择性地启用自带插件。例如开启web-search插件 plugins=(git web-search) last-working-dir顾名思义，last-working-dir插件可以保存你上一次退出命令行时的路径，当你再次进入命令行的时候自动切换到离开时的路径。这个插件特别好用，特别是工作在十分冗长的目录时，就不用记住路径了。 catimg可以将路径中的图片用命令行打印到终端。这个我个人用得很少，当图片预览也是挺好玩的。 $ catimg xxxx.png urltoolsurltools插件提供URL编码机制，可以使用urlencode进行URL编码 $ urlencode https://teoan.top/https%3A%2F%2Fteoan.top%2F urldecode 则是用来解码 $ urldecode https%3A%2F%2Fteoan.top%2Fhttps://teoan.top/ z这个插件用于快速的跳转访问过的路径，例如当你cd到 .oh-my-zsh/并离开此目录时，可以使用** z .oh-my-zsh/命令进行跳转，而且支持模糊跳转，也就是使用 z .oh-my**跳转也是可以的。 zsh-syntax-highlighting项目地址这个插件也是非常好用的，当你命令输入正确的时候会变命令绿色，反之会变红色，便于一眼看出错误。安装 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 然后在.zshrc中加入相应插件名称 plugins=(其他的插件 zsh-syntax-highlighting) 利用source命令使之生效 source ~/.zshrc zsh-autosuggestions项目地址这个插件可以实现命令自动补全功能，它会显示推荐的命令，然后可以按 → 补全，可以提高效率。安装 git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions 然后在.zshrc中加入相应插件名称 plugins=(其他的插件 zsh-autosuggestions) git-open项目地址这个插件可以在终端远程打开当前项目的地址，当你改完本地代码后查看远程仓库会非常的方便。安装 git clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open 然后在.zshrc中加入相应插件名称 plugins=(其他的插件 git-open) 关于zsh的好用插件还有很多，插件装多了zsh容易变卡顿，所以建议还是按需安装。想了解更多的插件可以参考：(https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins) 本文参考：（https://juejin.im/entry/5ae00e54f265da0b8635ea5c）]]></content>
      <categories>
        <category>zsh</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown常用语法归纳]]></title>
    <url>%2F2018%2F09%2F23%2FMarkdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%BD%92%E7%BA%B3%2F</url>
    <content type="text"><![CDATA[前言Markdown语法是一种越来越多人使用的轻量级标记语言，能够让写作的人不用过于关注样式，所以受到了越来越多的人的喜欢，下面是我的一些语法归纳。 标题很多文章的回用到标题,在Markdowm的语法中，只需要在文本前加上#就可以创建一级标题(记得#后面要加空格哦！)，同样的，二级标题就加上##，以此类推，Markdown语法一共支持六级标题。效果如下： 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题 引用在Markdown语法中使用引用只需要在整个段落前加上&gt;,比如： 1&gt;这是一个引用 这是一个引用 区块的引用是可以嵌套的比如： 123&gt;这个是一级引用&gt;&gt;这个是二级引用&gt;&gt;&gt;这个是三级引用 这个是一级引用 这个是二级引用 这个是三级引用 引用块里面也是可以使用其他markdown语法的，比如标题、列表、代码区块等。拿上面的标题来举例子： 1&gt;# 标题 标题 列表列表也是写文章最常用的，markdown中有有序、无序还有代办列表。 无序列表无序列表可以用星号(*)，加号(+)或者减号(-)作为列表标记。比如： 123*AAA+BBB-CCC 效果如下： AAA BBB CCC 有序列表有序列表在数字后面加上英文的句号，如： 1231.2.3. 效果如下： 假如需要在列表项目里面加入引用，那么&gt;需要缩进： 这个是引用 这个也是引用 待办列表这列表是带有可选框的。表示是否被勾选： 123- [x] 想女朋友- [x] 不惹女朋友生气- [ ] 不爱女朋友 想女朋友 惹女朋友生气 不爱女朋友 代码在markdown中代码块是使用```将其包裹在其中的， 在围栏式代码块中，你可以在```后面指定指定语言标识，比如```java，这样代码就有高亮了： 1System.out.printf("hello world!"); 强调在markdown中，可以在文本前面使用 * 和 _ 来表示斜体和加粗，加上一对是斜体，两对是加粗。 1234\*斜体\*\_斜体\_\_\_加粗\_\_\*\*加粗\*\* 斜体斜体加粗加粗 链接markdown中链接用法是这样用的你想要显示的文字，比如： 1[Teoan的博客](https:&#x2F;&#x2F;teoan.top) Teoan的博客 表格在markdown中使用表格的语法其实很简单： 12345First | Second | Third ------- | ---------- | ---------First | Second | ThirdFirst | Second | ThirdFirst | Second | Third First Second Third First Second Third First Second Third First Second Third 还可以然表格中间居中(第二行冒号在哪边就向哪边对齐)： 12345First | Second | Third :------- | :----------: | ---------: First | Second | ThirdFirst | Second | ThirdFirst | Second | Third First Second Third First Second Third First Second Third First Second Third 分割线markdown中的分割线是用—来实现的： 123分割线之上---分割线之下 分割线之上 分割线之下 图片markdown中插入图片的用法和链接差不多，![自定义文字](图片链接)，图片链接可以是本地图片的路径或者是网络链接: 1![头像](https:&#x2F;&#x2F;i.imgur.com&#x2F;JVemOFZ.jpg) 关于markdown常用的语法也就这些了，markdown还有很多好学又好用的功能，如果需要深入地了解markdown语法，可以参阅Markdowm 中文文档。 本文参考文档：(https://coding.net/help/doc/project/markdown.html#i-3)]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用GitHub Page+Hexo搭建个人博客]]></title>
    <url>%2F2018%2F08%2F28%2F%E7%94%A8GitHub%20Page%2BHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[前言由于暑假在家极其容易咸鱼，对此在网上找了一些可以既可以花费时间去折腾又可以学到知识的东西，于是在知乎找到了这么一篇文章GitHub+Hexo搭建个人网站详细教程,于是我花了一天的时间搭了一个属于自己的博客，用来记录一些琐碎的知识，还有自己在实践中遇到的一些坑，下面我会分享一下我搭个人博客所用到的资源和心得。 使用hexo搭博客遇到的问题关于域名博客搭建完之后，其实可以用xxxx.github.io来访问，xxxx为你的github用户名。当然很多小伙伴希望用自己的域名来访问博客，这个时候就需要去注册一个自己的域名了，我是通过阿里云的万网注册的,)类型A的记录值是你github仓库的ip地址，ip地址可以利用终端ping一下的你仓库域名(xxxx.github.io)获取,类型CNAME则是你github仓库的域名即 xxxx.github.io,设置完域名的解析和配置github仓库后，就可以如愿的通过域名访问博客了。需要注意的是，注册完域名一定要进行实名认证，这样域名才能够正常使用。 关于hexo live2d插件博客搭好了，你可能会觉得你的博客有点单调，这个时候就可以利用live2d插件添加一个你喜欢的看板娘，看板娘的类型有很多，可以到live2d插件作者的博客观摩，配置live2d插件很简单，可以根据live2d插件github中的md进行配置，相信这些难不倒你。如果你和我一样用的是next主题的话， 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw&#x2F; pluginJsPath: lib&#x2F; pluginModelPath: assets&#x2F; tagMode: false debug: false model: use: live2d-widget-model-wanko display: position: right width: 150 height: 300 mobile: show: true 以上配置应该是添加到Hexo的_config.yml文件，而不是主题的_config.yml文件。(我一开始添加到主题的配置文件中毫无作用。。。)现在，看板娘已经出现在你的博客中了，如果你想了解更多live2d插件配置的属性可以参阅live2d-widget.js API。如果你想制作你自己的看板娘到自己的博客，可以参阅live2d官网和这两篇文章 给博客添加能动的看板娘(Live2D)-关于模型的二三事 给博客添加能动的看板娘(Live2D)-将其添加到网页上吧 关于NexT主题NexT主题是很多人的选择，其优点在于满足了大部分人对于简约的要求，同时又有许多子主题可供选择，还能结合第三方的插件进行使用，还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看： NexT官网 NexT的github地址]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
</search>
