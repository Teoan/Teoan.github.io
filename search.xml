<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录一下SpringSecurity的使用过程</title>
    <url>/2020/05/10/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BSpringSecurity%E7%9A%84%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在学习项目的过程中，发现权限认证管理使用的是SpringSecurity，SpringSecurity功能非常强大，由于之前没接触过，所以此写下自己的入门使用过程。</p>
<a id="more"></a>

<h2 id="什么是SpringSecurity？"><a href="#什么是SpringSecurity？" class="headerlink" title="什么是SpringSecurity？"></a>什么是SpringSecurity？</h2><p>Spring Security是一套认证授权框架,支持认证模式如HTTP BASIC 认证头 (基于 IETF RFC-based 标准),HTTP Digest 认证头 ( IETF RFC-based 标准),Form-based authentication (用于简单的用户界面),OpenID 认证等,Spring Security使得当前系统可以快速集成这些验证机制亦或是实现自己的一套验证机制.</p>
<h2 id="如何在SpringBoot中使用SpringSecurity？"><a href="#如何在SpringBoot中使用SpringSecurity？" class="headerlink" title="如何在SpringBoot中使用SpringSecurity？"></a>如何在SpringBoot中使用SpringSecurity？</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><ol>
<li>在创建项目的时候引入依赖。<br><img src="https://i.imgur.com/wdJi5Nr.jpg" alt=""></li>
<li>直接在pom.xml中引入依赖。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
引入依赖后Spring Security默认保护所有接口。</li>
</ol>
<h3 id="配置Spring-Security"><a href="#配置Spring-Security" class="headerlink" title="配置Spring Security"></a>配置Spring Security</h3><p>Spring Security提供了一个适配器，可以在适配器的实现类中去配置Spring Security，包括认证方式、登录成功失败后跳转的页面、API接口的拦截与放行等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>WebSecurityConfigurerAdapter提供了三个configure函数需要我们去实现。</p>
<h4 id="认证管理器配置方法"><a href="#认证管理器配置方法" class="headerlink" title="认证管理器配置方法"></a>认证管理器配置方法</h4><p>主要配置用户的认证、加密方式等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//自定义的用户和角色数据提供者</span></span><br><span class="line">        auth.userDetailsService(customUserDetailsService).passwordEncoder(<span class="keyword">new</span> PasswordEncoder() &#123; <span class="comment">//设置密码加密对象</span></span><br><span class="line">            <span class="comment">//encode():把参数按照特定的解析规则进行解析</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                使用Spring自带的加密工具加密字段</span></span><br><span class="line">                <span class="keyword">return</span> DigestUtils.md5DigestAsHex(charSequence.toString().getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            matches()验证从存储中获取的编码密码与编码后提交的原始密码是否匹配</span></span><br><span class="line"><span class="comment">//            第一个参数表示需要被解析的密码。第二个参数表示存储的密码。</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.equals(DigestUtils.md5DigestAsHex(charSequence.toString().getBytes()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>由于项目中使用的用户名和密码是从数据库中获取的，所以我这里使用了一个自定义的用户和角色数据提供者customUserDetailsService。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RolesService rolesService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user= userService.loadUserByUsername(s);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Role&gt; roles = rolesService.getRoleByUid(user.getId());</span><br><span class="line">        user.setRoles(roles);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义的用户和角色数据提供者需要实现UserDetailsService接口，这个接口很简单，只需要实现一个函数loadUserByUsername，这个函数需要我们自定义内容，实现通过用户名获取到一个UserDetails的实例对象。UserDetails也是一个接口，我用User对象去实现了UserDetails接口，所以我这里返回的是一个User对象。<br>下面是UserDetails的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="comment">//返回用户的权限集， 默认需要添加ROLE_ 前缀</span></span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line">	<span class="comment">//获取用户密码</span></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//获取用户名</span></span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//账户是否不过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//账户是否不锁定</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//账户凭证是否不过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//账户是否启用</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserDetails接口需要我们实现7个函数。函数的作用我已经备注好了。</p>
<h4 id="核心过滤器配置方法"><a href="#核心过滤器配置方法" class="headerlink" title="核心过滤器配置方法"></a>核心过滤器配置方法</h4><p>一般用来设置忽略Spring Security 对静态资源的控制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//忽略对静态资源的控制</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/blogimg/**"</span>,<span class="string">"/index.html"</span>,<span class="string">"favicon.ico"</span>,<span class="string">"/static/**"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="安全过滤器链配置方法。"><a href="#安全过滤器链配置方法。" class="headerlink" title="安全过滤器链配置方法。"></a>安全过滤器链配置方法。</h4><p>这个方法比较重要也是使用最多的，HttpSecurity中需要我们配置很多东西，我们可以在HttpSecurity中自定义我们安全访问的规则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/admin/category/all"</span>)</span><br><span class="line">            .authenticated()</span><br><span class="line">            .antMatchers(<span class="string">"/admin/**"</span>,<span class="string">"/reg"</span>)</span><br><span class="line">            .hasRole(<span class="string">"超级管理员"</span>)<span class="comment">///admin/**和/reg的URL都需要有超级管理员角色，如果使用.hasAuthority()方法来配置，需要在参数中加上ROLE_,如下.hasAuthority("ROLE_超级管理员")</span></span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()<span class="comment">//其他的路径都是登录后即可访问</span></span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()<span class="comment">//指定支持基于表单的身份验证。如果未指定FormLoginConfigurer#loginPage(String)，则将生成默认登录页面</span></span><br><span class="line">            .loginPage(<span class="string">"/login_page"</span>)<span class="comment">//设置登录页面</span></span><br><span class="line">            .failureUrl(<span class="string">"/login_error"</span>)<span class="comment">//设置登录失败后跳转的页面</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">"/login_success"</span>,<span class="keyword">true</span>)<span class="comment">//设置登录成功后跳转的页面</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>)<span class="comment">//设置登录表单提交的页面</span></span><br><span class="line">            .usernameParameter(<span class="string">"username"</span>)<span class="comment">//设置表单提交用户名时使用的参数名</span></span><br><span class="line">            .passwordParameter(<span class="string">"password"</span>)<span class="comment">//设置表单提交密码时使用的参数名</span></span><br><span class="line">            .permitAll()<span class="comment">//允许任何人访问</span></span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf()</span><br><span class="line">            .disable()</span><br><span class="line">            .exceptionHandling()</span><br><span class="line">            .accessDeniedHandler((httpServletRequest, httpServletResponse, e) -&gt; &#123;</span><br><span class="line">                httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">                httpServletResponse.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                PrintWriter printWriter = httpServletResponse.getWriter();</span><br><span class="line">                printWriter.write(<span class="string">"权限不足，请联系管理员"</span>);<span class="comment">//返回失败json数据</span></span><br><span class="line">                printWriter.flush();</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>SpringSecurity的基础使用就配置完了，可以根据项目需求，选择返回的是一个页面还是返回Json数据。SpringSecurity功能比较强大，貌似配置也比较麻烦一点？等有空我学了另一个安全管理框架–Shiro再来做个对比。</p>
]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于spring-security 表单登录参数为null问题</title>
    <url>/2020/05/04/%E5%85%B3%E4%BA%8Espring-Security-%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E4%B8%BAnul%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>由于第一次使用SpringSecurity做登录认证模块，在此期间遇到不少的问题，在此记录下自己遇到的坑。</p>
<a id="more"></a>

<p>前端使用了axios进行数据的交互，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     postRequest(<span class="string">'/login'</span>, &#123;</span><br><span class="line">       username: username,</span><br><span class="line">       password: password</span><br><span class="line">     &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span> &#123;</span><br><span class="line">       _this.loading = <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">if</span> (resp.status == <span class="number">200</span>) &#123;</span><br><span class="line">         <span class="comment">//成功</span></span><br><span class="line">         </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//失败</span></span><br><span class="line">      </span><br><span class="line">       &#125;</span><br><span class="line">     &#125;, resp=&gt; &#123;</span><br><span class="line"><span class="comment">//失败</span></span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
<p>postRequest函数内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      url: <span class="string">`<span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">      data: params,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端登录配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">	http.loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">                .usernameParameter(<span class="string">"username"</span>)</span><br><span class="line">                .passwordParameter(<span class="string">"password"</span>);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端认证代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">    User user= userService.loadUserByUsername(s);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Role&gt; roles = rolesService.getRoleByUid(user.getId());</span><br><span class="line">    user.setRoles(roles);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端进行登录请求的时候一直提示登录失败，查看服务端后台log如下：<br><img src="https://i.imgur.com/hygFjqe.jpg" alt=""></p>
<p>根据log，查看了服务端代码，发现UserDetailsService接口中的loadUserByUsername接收到的字符串为null。所以返回了一个空的User对象，导致密码匹配认证不通过。所以登录失败了。</p>
<p>于是我使用了API调试工具进行登录测试：<br><img src="https://i.imgur.com/cDe3Huy.jpg" alt=""></p>
<p>发现可以登录成功，于是猜测可能是前端的交互方式有问题，于是Google了一下，发现SpringSecurity默认的登录数据是通过 key/value 的形式来传递的，默认情况下不支持 JSON格式的登录数据。<br>知道原因之后就好解决了，可以将axios中的参数改为key/value的方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">      postRequest(<span class="string">'/login'</span>,<span class="string">'username='</span>+username+<span class="string">'&amp;password='</span>+password).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(resp.status==<span class="number">200</span>)&#123;</span><br><span class="line">               <span class="comment">//成功</span></span><br><span class="line"><span class="keyword">this</span>.$alert(<span class="string">'登录成功！'</span>,<span class="string">'成功！'</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">this</span>.$alert(<span class="string">'登录失败！'</span>,<span class="string">'失败！'</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,resp=&gt;&#123;</span><br><span class="line">           _this.$alert(<span class="string">'找不到服务器！'</span>, <span class="string">'失败!'</span>);</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>
<p>或者使用qs库将Json对象以 k=v的格式进行格式化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      url: <span class="string">`<span class="subst">$&#123;base&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">      data: qs.stringify(params),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以成功登录，问题解决。</p>
]]></content>
      <categories>
        <category>axios</category>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于vue-cli npm run build空白页问题</title>
    <url>/2020/04/29/%E5%85%B3%E4%BA%8Evue-cli%20npm%20run%20build%E7%A9%BA%E7%99%BD%E9%A1%B5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天准备调试自己写的SpringBoot后端api，打开之前部署在SpringBoot上的Vue.js前端页面时，发现是一整个空白的页面，由于自己刚接触SpringBoot和Vue.js前后端分离的开发模式，相关经验较少，在此记录自己的解决过程。</p>
<a id="more"></a>

<p>利用Chrome浏览器，按下f12打开控制台发现以下错误：文件路径错误<br><img src="https://i.imgur.com/fS0ARbq.jpg" alt="error"></p>
<p>文件路径错误，导致css、js等文件获取不到，所以导致的页面的空白。</p>
<p>为什么会找不到文件呢？打开Vue项目下的dist目录，发现文件是存在的。</p>
<p><img src="https://i.imgur.com/RlG8Y3n.jpg" alt=""></p>
<p>经过Goole查找相关资料和查阅Vue.config.js的官方配置参考后发现publicPath参数：<br><img src="https://i.imgur.com/gQ99ZC7.jpg" alt=""></p>
<p>由于没有配置publicPath参数，所以默认的路径为绝对路径，导致引用资源文件时使用的也是绝对路径，所以也就渲染不了页面，最终显示为空白页。</p>
<p>在vue.config.js文件中将publicPath参数设置为相对路径，这样打出来的包可以被部署在任意路径了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">"./"</span>,</span><br><span class="line">    assetsDir: <span class="string">"./static"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于后端使用了Spring Security作权限管理，为了方便管理路径的权限，这里我还顺便配置了assetsDir参数，这参数是用来指定打包后的静态资源文件的位置的。<br>修改，保存后执行打包构建。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue-cli-service build</span><br></pre></td></tr></table></figure>
<p>打包完成后的目录：<br><img src="https://i.imgur.com/Urorx1q.jpg" alt=""></p>
<p>打开index.html<br><img src="https://i.imgur.com/RBDE01w.jpg" alt=""><br>页面正常地显示了。</p>
<p>参考：<a href="[https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE](https://cli.vuejs.org/zh/config/#全局-cli-配置)">vue.config.js配置参考</a></p>
]]></content>
      <categories>
        <category>Vue.js</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Github上的Webhooks实现网站自动化部署</title>
    <url>/2019/11/18/%E5%88%A9%E7%94%A8Github%E4%B8%8A%E7%9A%84Webhooks%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于本人的hexo博客是提交到GitHub上的，每一次更新博客都得在服务器上面手动pull更新，这样就显得十分蛋疼。所以Google了一下我的需求，发现了Github上的<a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">Webhooks</a>功能，为此记录下我实现的过程。</p>
<a id="more"></a>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>由于Webhooks使用的是NodeJS，所以需要安装npm等相关的依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>
<h2 id="安装webhooks后端服务所需要的组件"><a href="#安装webhooks后端服务所需要的组件" class="headerlink" title="安装webhooks后端服务所需要的组件"></a>安装webhooks后端服务所需要的组件</h2><p>安装github-webhook-handler</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -S github-webhook-handler</span><br></pre></td></tr></table></figure>

<p>安装node进程管理工具pm2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g pm2</span><br></pre></td></tr></table></figure>
<h2 id="创建自动化部署脚本文件deploy-sh"><a href="#创建自动化部署脚本文件deploy-sh" class="headerlink" title="创建自动化部署脚本文件deploy.sh"></a>创建自动化部署脚本文件deploy.sh</h2><p>在自定义目录下创建deploy脚本实现自动化部署，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "start deployment"</span><br><span class="line">cd /home/xxx/xxx.github.io</span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">echo "done"</span><br></pre></td></tr></table></figure>
<p>运行时如果会出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd: can&#39;t cd to &#x2F;home&#x2F;xxx&#x2F;xxx.github.io</span><br></pre></td></tr></table></figure>
<p>原因可能是你的shell脚本在window上编写的，这样的话到linux系统运行时就会出现编码格式问题，window为dos而linux为unix。解决：<br>使用vim更改文件格式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim deploy.sh</span><br></pre></td></tr></table></figure>
<p>查看文件格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set ff</span><br></pre></td></tr></table></figure>
<p>更改文件格式为unix：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set ff&#x3D;unix</span><br><span class="line">或者</span><br><span class="line">:set fileformat&#x3D;unix</span><br></pre></td></tr></table></figure>


<h2 id="创建Webhook后端运行代码"><a href="#创建Webhook后端运行代码" class="headerlink" title="创建Webhook后端运行代码"></a>创建Webhook后端运行代码</h2><p>在上文deploy.sh文件同一目录下创建webhook.js文件，内容如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/auto_deploy'</span>, <span class="attr">secret</span>: <span class="string">'xxxx'</span> &#125;)</span><br><span class="line"><span class="comment">// 上面的 secret 在配置Github上webhook时需要用到</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_cmd</span>(<span class="params">cmd, args, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">  <span class="keyword">var</span> child = spawn(cmd, args);</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123; resp += buffer.toString(); &#125;);</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback (resp) &#125;);</span><br><span class="line">&#125;</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span></span><br><span class="line">    res.end(<span class="string">'no such location'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">10000</span>)<span class="comment">//监听本地10000端口</span></span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">    run_cmd(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>,event.payload.repository.name], <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123; <span class="built_in">console</span>.log(text) &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//deploy.sh为自动化部署的脚本文件</span></span><br></pre></td></tr></table></figure>
<h2 id="使用pm2进程管理器运行webhook-js"><a href="#使用pm2进程管理器运行webhook-js" class="headerlink" title="使用pm2进程管理器运行webhook.js"></a>使用pm2进程管理器运行webhook.js</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 start webhook.js</span><br></pre></td></tr></table></figure>
<p>如果在运行的时候如果提示 github-webhook-handler is not defined 未找到 ，可以在目录中执行 npm link github-webhook-handler。<br>可以使用以下命令查看端口是否正常使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -tlnp|grep 10000</span><br></pre></td></tr></table></figure>
<p>正常结果如下图：<br><img src="https://i.imgur.com/AoGYaoE.png" alt="tcp"></p>
<p>目前为止，一切顺利的话，webhook就在服务器上跑了起来，如果需要映射到公网的80端口，那么需要配置一下Nginx反向代理。</p>
<h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>配置Nginx使访问网站80端口的<strong>/auto_deploy</strong>URL转发到本地的10000端口，在<strong>/etc/nginx/nginx.conf</strong>文件中加入如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">  # 80端口是http正常访问的接口</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name xxx.com;</span><br><span class="line">  location &#x2F;auto_deploy &#123;</span><br><span class="line">       proxy_pass http:&#x2F;&#x2F;127.0.0.1:10000;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启Nginx：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx.service</span><br></pre></td></tr></table></figure>
<h2 id="配置Github上的Webhook"><a href="#配置Github上的Webhook" class="headerlink" title="配置Github上的Webhook"></a>配置Github上的Webhook</h2><p>进入Github项目地址，点击设置按钮，找到Webhooks，进行如下配置：<br><img src="https://i.imgur.com/c1kTXAQ.jpg" alt=""><br>其中，Secret项需要和webhook.js文件中的保持一致，Content type 选择application/json。<br>不出意外的话可以看到最近提交是否成功。<br><img src="https://i.imgur.com/AlSPQ6A.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Git</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于ASP.NET中Ajax请求错误的问题</title>
    <url>/2019/11/16/%E5%85%B3%E4%BA%8EASP.NET%E4%B8%ADAjax%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记录下自己做作业时遇到的问题。</p>
<a id="more"></a>


<h2 id="在ASP-NET中使用Jquery-Ajax请求时发生身份验证错误"><a href="#在ASP-NET中使用Jquery-Ajax请求时发生身份验证错误" class="headerlink" title="在ASP.NET中使用Jquery+Ajax请求时发生身份验证错误"></a>在ASP.NET中使用Jquery+Ajax请求时发生身份验证错误</h2><p>错误如下图所示：<br><img src="https://i.imgur.com/ldieh3R.png" alt="error"></p>
<p>解决：找到APP_Start文件夹，更改RouteConfig.cs中AutoRedirectMode的配置。<br>原本为:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">settings.AutoRedirectMode = RedirectMode.Permanent;</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">settings.AutoRedirectMode = RedirectMode.Off;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET</category>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一下Java Web项目遇到的问题</title>
    <url>/2019/09/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BJava%20Web%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近对Java Web应用感兴趣，之前从来没接触过，所以写了篇博文记录自己遇到的问题和解决办法，便于自己回顾复习。</p>
<a id="more"></a>

<h2 id="关于反射机制中的BeanUtils开发包"><a href="#关于反射机制中的BeanUtils开发包" class="headerlink" title="关于反射机制中的BeanUtils开发包"></a>关于反射机制中的BeanUtils开发包</h2><p>在利用BeanUtils开发包封装数据到Bean对象的过程中，特殊对象日期不能直接封装到Bean对象中，需要手动注册一个日期转换器对Date对象进行转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConvertUtils.register(<span class="keyword">new</span> DateLocaleConverter(), Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>如果按照上面的代码，则会出现类似错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.commons.beanutils.ConversionException: Error parsing date <span class="string">'2019-10-10'</span> at position=<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>原因是没有给转换器设置对应的地区区域日期格式。查看源码发现<strong>DateLocaleConverter</strong>类有构造函数DateLocaleConverter(Locale locale, String pattern)，最终解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateLocaleConverter converter = <span class="keyword">new</span> DateLocaleConverter(Locale.getDefault(),<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">converter.setLenient(<span class="keyword">true</span>);<span class="comment">//实现日期自动转换，如输入类似'2019-14-30'的日期时，会自动转换成'2020-03-1'</span></span><br><span class="line">ConvertUtils.register(converter, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="关于C3P0连接池的配置和使用"><a href="#关于C3P0连接池的配置和使用" class="headerlink" title="关于C3P0连接池的配置和使用"></a>关于C3P0连接池的配置和使用</h2><p>使用C3P0连接池链接数据库进行增删改查时出现警告：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.mchange.v2.c3p0.cfg.C3P0Config.getUnspecifiedUserProperties named-config with name <span class="string">'mysql'</span> does not exist. Using <span class="keyword">default</span>-config.</span><br></pre></td></tr></table></figure>
<p>并抛出异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.sql.SQLException: No suitable driver</span><br></pre></td></tr></table></figure>
<p>原因：c3p0 获取不到配置文件的内容，使用了默认配置，导致找不到对应的数据库链接。<br>解决办法：</p>
<ul>
<li>检查xml配置文件中的<strong>driverClass</strong>和<strong>jdbcUr</strong>是否写错。</li>
<li>检查c3p0-config.xml是否正确存在于src目录下。</li>
<li>检查c3p0-config.xml第一行是否为空。</li>
</ul>
<h2 id="关于Mysql插入中文时数据库显示乱码"><a href="#关于Mysql插入中文时数据库显示乱码" class="headerlink" title="关于Mysql插入中文时数据库显示乱码"></a>关于Mysql插入中文时数据库显示乱码</h2><p>在使用c3p0连接池对中文数据进行插入时出现:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.sql.SQLException: Incorrect string value: &#39;\xF0\x9F\x98\x80\xE3\x80...&#39; for column &#39;show_content&#39; at row 1</span><br></pre></td></tr></table></figure>
<p>Google 了一下，原因在于Mysql中的utf-8编码是按三个字节一个单位编码的，遇到以4个字节为单位的编码的数据就会出现切割，从而出现乱码。<br>按照网上给的解决方法：</p>
<ol>
<li>将Mysql数据库的编码修改为utf8mb4</li>
<li>将数据表的编码修改为utf8mb4</li>
<li>修改c3p0连接池中Mysql连接配置代码</li>
</ol>
<p>由于我使用的开发环境是idea+navicat，上述修改十分方便，然而还是不能解决我的问题。<br>我最后的解决办法：修改表中字段的字符集为utf8mb4。</p>
<h2 id="关于jsp页面无法使用EL表达式"><a href="#关于jsp页面无法使用EL表达式" class="headerlink" title="关于jsp页面无法使用EL表达式"></a>关于jsp页面无法使用EL表达式</h2><p>在使用String MVC开发过程中，使用Model类中的函数<strong>addAttribute</strong>向前端jsp页面传值时出现无法解析问题，抛出的异常如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NumberFormatException: For input string: <span class="string">"$&#123;begin &#125;"</span></span><br><span class="line">	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">68</span>)</span><br><span class="line">	at java.base/java.lang.Integer.parseInt(Integer.java:<span class="number">644</span>)</span><br><span class="line">	at java.base/java.lang.Integer.valueOf(Integer.java:<span class="number">989</span>)</span><br><span class="line">	at org.apache.jasper.compiler.JspUtil.coerceToInt(JspUtil.java:<span class="number">560</span>)</span><br></pre></td></tr></table></figure>
<p>抛出的异常显示对字符串<strong>${begin }</strong>的格式转换错误，于是找到该变量在jsp文件中的位置如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">"$&#123;begin &#125;"</span> end=<span class="string">"$&#123;end &#125;"</span> <span class="keyword">var</span>=<span class="string">"i"</span>&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">"$&#123;i eq pageInfo.pageNum &#125;"</span>&gt;</span><br><span class="line">            &lt;a class="page-numbers current"&gt;$&#123;i&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:otherwise&gt;</span><br><span class="line">            &lt;a class="page-numbers" href="$&#123;pageUrlPrefix&#125;=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<p>显然jsp页面无法将EL表达式中的<strong>${begin }</strong>解析为int。<br>原因如下：使用了老的JSP 1.2 声明，在JSP 1.2 声明中EL表达式默认是关闭的。<br>解决办法：使用新的JSP声明替换掉旧的声明。找到webapp/WEB-INF路径下的web.xml文件，将约束头替换成新的版本。<br>各版本约束头如下：</p>
<h3 id="web-app-3-1"><a href="#web-app-3-1" class="headerlink" title="web-app 3.1"></a>web-app 3.1</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>jdk版本1.7以上</li>
</ul>
<h3 id="web-app-3-0"><a href="#web-app-3-0" class="headerlink" title="web-app 3.0"></a>web-app 3.0</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>jdk版本1.6以上,支持jsp-config配置</li>
</ul>
<h3 id="web-app-2-5"><a href="#web-app-2-5" class="headerlink" title="web-app 2.5"></a>web-app 2.5</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>jdk版本1.5以上</li>
</ul>
<h3 id="web-app-2-4"><a href="#web-app-2-4" class="headerlink" title="web-app 2.4"></a>web-app 2.4</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"2.4"</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>总结一下毕业设计项目中所遇到的问题</title>
    <url>/2019/05/22/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经历了两个多月的时间，终于把毕业设计的要求一步一步地慢慢实现了，中间踩过的坑数不胜数，由此列出了一些遇到的问题还有解决方法。<br>项目地址：<a href="https://github.com/Teoan/garage" target="_blank" rel="noopener">https://github.com/Teoan/garage</a></p>
<a id="more"></a>



<h2 id="在ubuntu中QtCreator无法输入中文"><a href="#在ubuntu中QtCreator无法输入中文" class="headerlink" title="在ubuntu中QtCreator无法输入中文"></a>在ubuntu中QtCreator无法输入中文</h2><p>这个和输入法的类型有关，系统中所使用的输入法为Fcitx，然而Qt自带的插件中只支持iBus输入法。<br>解决：安装fcitx-libs-qt或fcitx-libs-qt5，在系统中找到<strong>libfcitxplatforminputcontextplugin.so</strong>这个动态库文件，复制到Qt安装目录中的<strong>/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts</strong>子目录下，重新运行程序即可解决。(注意:不同版本的Qt，插件的路径会有所不同)</p>
<h2 id="arm-linux-gcc-成功在Qt编译，但是上传到板子上面运行出现："><a href="#arm-linux-gcc-成功在Qt编译，但是上传到板子上面运行出现：" class="headerlink" title="arm-linux-gcc 成功在Qt编译，但是上传到板子上面运行出现："></a>arm-linux-gcc 成功在Qt编译，但是上传到板子上面运行出现：</h2><blockquote>
<p>.-/bin/sh: ./xxxxx: not found</p>
</blockquote>
<p>解决:我用的工具链版本是4.4.3，板子上内核是用5.4.0编译的，版本不匹配，换一个5.4.0的交叉编译工具链或者比5.4.0新就可以了。</p>
<h2 id="关于交叉编译工具链的选择"><a href="#关于交叉编译工具链的选择" class="headerlink" title="关于交叉编译工具链的选择"></a>关于交叉编译工具链的选择</h2><p>网上查到的大多数ARM交叉编译工具链版本为4.4.3或者5.4.0，基本上4.4.3版本为32位系统的，5.4.0版本为64位的，然而现在网上资源默认你是用64位版本的系统，所以给的工具链都不会和你说是64位的，然而我用的是32位系统的，为此也遇到了许多坑。网上32位交叉编译工具链的资源比较少，要么得自己去编译，要么要一大堆积分去下载。偶然发现一家和ARM公司合作的<a href="https://www.linaro.org/" target="_blank" rel="noopener">Linaro公司</a>,虽然是英文的但是在里面可以找到各种版本个平台的交叉编译工具，再也不用为找ARM交叉编译工具链而烦恼了。<br>各平台各版本下载地址:<a href="https://releases.linaro.org/components/toolchain/binaries/" target="_blank" rel="noopener">https://releases.linaro.org/components/toolchain/binaries/</a></p>
<h2 id="在ARM板上面使用opencv时，出现"><a href="#在ARM板上面使用opencv时，出现" class="headerlink" title="在ARM板上面使用opencv时，出现:"></a>在ARM板上面使用opencv时，出现:</h2><blockquote>
<p>error while loading shared libraries: /lib/libm.so.6: internal error</p>
</blockquote>
<p>解决:出现这个问题应该是arm板上面的openvc库的软连接弄丢了，特别是在windows交叉编译的opencv的库,重新建立软连接就可以了。</p>
<h2 id="关于误删除libc-so-6"><a href="#关于误删除libc-so-6" class="headerlink" title="关于误删除libc.so.6"></a>关于误删除libc.so.6</h2><p>删除后发现各种大多数指令都用不了，会出现没有找到动态库的情况。<br>解决:利用 <strong>LD_PRELOAD=</strong> 指定运行时的动态库，可以暂时使用常用命令重建软连接。例如：</p>
<blockquote>
<p>LD_PRELOAD=/lib64/libc-2.12.so ln -s /lib64/libc-2.12.so /lib64/libc.so.6</p>
</blockquote>
<h2 id="使用easypr后识别结果为乱码"><a href="#使用easypr后识别结果为乱码" class="headerlink" title="使用easypr后识别结果为乱码"></a>使用easypr后识别结果为乱码</h2><blockquote>
<p>“\u00E8\u0093\u009D\u00E7\u0089\u008C:\u00E5\u00B7\u009DA88888”</p>
</blockquote>
<p>解决:<br>原本的字符串处理方式为:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CPlate cp =plateVec.at(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">String</span> ret = cp.getPlateStr();</span><br><span class="line">QString str =QString::fromLocal8Bit(ret.c_str());</span><br><span class="line">ui-&gt;label-&gt;setText(str);</span><br></pre></td></tr></table></figure>
<p>改为:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CPlate cp =plateVec.at(<span class="number">0</span>);</span><br><span class="line">cv::<span class="keyword">String</span> ret = cp.getPlateStr();</span><br><span class="line">ui-&gt;label-&gt;setText(ret.c_str());</span><br></pre></td></tr></table></figure>
<p>注意:ret.c_str()实现可以从cv::String类转换为count char * ,以上做法可以实现在Qt中显示中文，但是如果输出到终端还是会有乱码问题，如果需要终端输出，用cout直接输出String就可以了。</p>
]]></content>
      <categories>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Android客户端RSA加解密后出现乱码的问题</title>
    <url>/2019/03/24/%E5%85%B3%E4%BA%8EAndroid%E5%AE%A2%E6%88%B7%E7%AB%AFRSA%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%90%8E%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在项目过程中需要通过okhttp获取服务器上数据库的数据后进行RSA解密。</p>
<a id="more"></a>


<p>解密可以成功，但是前面会出现����乱码</p>
<blockquote>
<p>��������������������{“status”:0,”userName”:”Teoan”}</p>
</blockquote>
<p>本以为是编码问题，但是转换成UTF-8后发现还是一样。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>查找的一番资料后完美解决，在Android移动端获取解密的Cipher类时要使用Cipher.getInstance(“RSA/ECB/PKCS1Padding”); 而在服务器端应该使用Cipher.getInstance(“RSA”);来获取。</p>
<p>本文参考文档(<a href="https://blog.csdn.net/totcw/article/details/72820444" target="_blank" rel="noopener">https://blog.csdn.net/totcw/article/details/72820444</a>)</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一个特别好用的shell--zsh</title>
    <url>/2019/03/15/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E7%89%B9%E5%88%AB%E5%A5%BD%E7%94%A8%E7%9A%84shell-zsh/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Z shell（Zsh）是一款可用作交互式登录的shell及脚本编写的命令解释器。Zsh对Bourne shell做出了大量改进，同时加入了Bash、ksh及tcsh的某些功能。</p>
<a id="more"></a>
<h3 id="特性有"><a href="#特性有" class="headerlink" title="特性有"></a>特性有</h3><ul>
<li>可帮助用户键入常用命令选项及参数的可编程命令行补全功能，自带对数百条命令的支持</li>
<li>可与任意Shell共享命令历史</li>
<li>可在无需运行外部程序（如find）的情况下通过 文件扩展匹配文件</li>
<li>改进变量/数组处理方式</li>
<li>拼写检查</li>
<li>兼容多种模式(如bash等)</li>
<li>等等</li>
</ul>
<hr>
<h1 id="Oh-My-Zsh介绍"><a href="#Oh-My-Zsh介绍" class="headerlink" title="Oh My Zsh介绍"></a>Oh My Zsh介绍</h1><p>用户社区网站”Oh My Zsh”收集Z shell的第三方插件及主题。截止于2018年，其GitHub源共有超过1000位贡献者、200多款插件和超过140款主题。同时也带有更新已安装插件及主题的自动更新工具。</p>
<h2 id="zsh的安装"><a href="#zsh的安装" class="headerlink" title="zsh的安装"></a>zsh的安装</h2><p>查看一下系统中已安装的shell</p>
<blockquote>
<p>$ cat /etc/shells</p>
</blockquote>
<p>如果没安装zsh，则需安装(以Ubuntu为例子，其他系统可自行谷歌或百度)</p>
<blockquote>
<p>$ sudo apt-get install zsh</p>
</blockquote>
<p>查看当前使用中的shell,并切换默认shell为zsh</p>
<blockquote>
<p>$ echo $shell<br>$ chsh -s /bin/zsh</p>
</blockquote>
<p>注销出现登录就可以生效了。</p>
<h2 id="Oh-My-Zsh的安装和使用"><a href="#Oh-My-Zsh的安装和使用" class="headerlink" title="Oh My Zsh的安装和使用"></a>Oh My Zsh的安装和使用</h2><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">Oh My Zsh项目地址</a><br>安装Oh My Zsh之前，应该确保是否以安装zsh，不然回出现以下提示：</p>
<blockquote>
<p>Zsh is not installed! Please install zsh first!</p>
</blockquote>
<p>安装Oh My Zsh</p>
<blockquote>
<p>wget <a href="https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh</a> -O - | sh</p>
</blockquote>
<p>执行上面的命令后，Oh My Zsh就已经安装再你的系统中了，接下来可以对它进行主题配置。<br>Oh My Zsh的主题存在于 ~/。oh-my-zsh/thems 中，可以查看Oh My Zsh自带的的多种主题文件。</p>
<h3 id="配置Oh-My-Zsh"><a href="#配置Oh-My-Zsh" class="headerlink" title="配置Oh My Zsh"></a>配置Oh My Zsh</h3><p>Oh My Zsh的默认配置文件路径为~/.zshrc，可以编辑文件内容修改zsh主题</p>
<blockquote>
<p>vim ~/.zshrc</p>
</blockquote>
<p>将11行的ZSH_THEME字段的值更改为自己喜欢的主题名称，如：</p>
<blockquote>
<p>ZSH_THEME=”ys”</p>
</blockquote>
<p>效果如下<br><img src="https://farm8.staticflickr.com/7807/40494842503_3d150f66d4_z.jpg" alt="ys主题"></p>
<p>配置完Oh My Zsh了，不过现在的zsh还不是那么的好用，它的强大在于它有许多非常方便人性化的插件，选择性地安装并使用，会让你的工作事半功倍。</p>
<h2 id="Oh-My-Zsh插件推荐"><a href="#Oh-My-Zsh插件推荐" class="headerlink" title="Oh My Zsh插件推荐"></a>Oh My Zsh插件推荐</h2><p>Oh My Zsh的插件非常之多，一些是Oh My Zsh自带的插件，默认情况下没有开启，修改上文提到的.zshrc文件，可以选择性地启用自带插件。<br>例如开启web-search插件</p>
<blockquote>
<p>plugins=(git web-search)</p>
</blockquote>
<h3 id="last-working-dir"><a href="#last-working-dir" class="headerlink" title="last-working-dir"></a>last-working-dir</h3><p>顾名思义，last-working-dir插件可以保存你上一次退出命令行时的路径，当你再次进入命令行的时候自动切换到离开时的路径。这个插件特别好用，特别是工作在十分冗长的目录时，就不用记住路径了。</p>
<h3 id="catimg"><a href="#catimg" class="headerlink" title="catimg"></a>catimg</h3><p>可以将路径中的图片用命令行打印到终端。这个我个人用得很少，当图片预览也是挺好玩的。</p>
<blockquote>
<p>$ catimg xxxx.png</p>
</blockquote>
<h3 id="urltools"><a href="#urltools" class="headerlink" title="urltools"></a>urltools</h3><p>urltools插件提供URL编码机制，可以使用urlencode进行URL编码</p>
<blockquote>
<p>$ urlencode <a href="https://teoan.top/" target="_blank" rel="noopener">https://teoan.top/</a><br>https%3A%2F%2Fteoan.top%2F</p>
</blockquote>
<p> urldecode 则是用来解码</p>
<blockquote>
<p>$ urldecode https%3A%2F%2Fteoan.top%2F<br><a href="https://teoan.top/" target="_blank" rel="noopener">https://teoan.top/</a></p>
</blockquote>
<h3 id="z"><a href="#z" class="headerlink" title="z"></a>z</h3><p>这个插件用于快速的跳转访问过的路径，例如当你cd到 .oh-my-zsh/并离开此目录时，可以使用** z  .oh-my-zsh/<strong>命令进行跳转，而且支持模糊跳转，也就是使用</strong> z  .oh-my**跳转也是可以的。</p>
<h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">项目地址</a><br>这个插件也是非常好用的，当你命令输入正确的时候会变命令绿色，反之会变红色，便于一眼看出错误。<br>安装</p>
<blockquote>
<p>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</p>
</blockquote>
<p>然后在.zshrc中加入相应插件名称</p>
<blockquote>
<p>plugins=(其他的插件 zsh-syntax-highlighting)</p>
</blockquote>
<p>利用source命令使之生效</p>
<blockquote>
<p>source ~/.zshrc</p>
</blockquote>
<h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">项目地址</a><br>这个插件可以实现命令自动补全功能，它会显示推荐的命令，然后可以按 → 补全，可以提高效率。<br><img src="https://farm8.staticflickr.com/7812/40494842553_77ddc55e35_b.jpg" alt="zsh-autosuggestions"><br>安装</p>
<blockquote>
<p>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</p>
</blockquote>
<p>然后在.zshrc中加入相应插件名称</p>
<blockquote>
<p>plugins=(其他的插件 zsh-autosuggestions)</p>
</blockquote>
<h3 id="git-open"><a href="#git-open" class="headerlink" title="git-open"></a>git-open</h3><p><a href="https://github.com/paulirish/git-open" target="_blank" rel="noopener">项目地址</a><br>这个插件可以在终端远程打开当前项目的地址，当你改完本地代码后查看远程仓库会非常的方便。<br>安装</p>
<blockquote>
<p>git clone <a href="https://github.com/paulirish/git-open.git" target="_blank" rel="noopener">https://github.com/paulirish/git-open.git</a> $ZSH_CUSTOM/plugins/git-open</p>
</blockquote>
<p>然后在.zshrc中加入相应插件名称</p>
<blockquote>
<p>plugins=(其他的插件 git-open)</p>
</blockquote>
<hr>
<p>关于zsh的好用插件还有很多，插件装多了zsh容易变卡顿，所以建议还是按需安装。<br>想了解更多的插件可以参考：(<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a>)</p>
<p>本文参考：（<a href="https://juejin.im/entry/5ae00e54f265da0b8635ea5c）" target="_blank" rel="noopener">https://juejin.im/entry/5ae00e54f265da0b8635ea5c）</a></p>
]]></content>
      <categories>
        <category>zsh</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法归纳</title>
    <url>/2018/09/23/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Markdown语法是一种越来越多人使用的轻量级标记语言，能够让写作的人不用过于关注样式，所以受到了越来越多的人的喜欢，下面是我的一些语法归纳。</p>
<a id="more"></a>

<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>很多文章的回用到标题,在Markdowm的语法中，只需要在文本前加上<strong>#</strong>就可以创建一级标题(记得#后面要加空格哦！)，同样的，二级标题就加上<strong>##</strong>，以此类推，Markdown语法一共支持六级标题。效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在Markdown语法中使用引用只需要在整个段落前加上<strong>&gt;</strong>,比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是一个引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一个引用</p>
</blockquote>
<p>区块的引用是可以嵌套的比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这个是一级引用</span><br><span class="line">&gt;&gt;这个是二级引用</span><br><span class="line">&gt;&gt;&gt;这个是三级引用</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个是一级引用</p>
<blockquote>
<p>这个是二级引用</p>
<blockquote>
<p>这个是三级引用</p>
</blockquote>
</blockquote>
</blockquote>
<p>引用块里面也是可以使用其他markdown语法的，比如标题、列表、代码区块等。<br>拿上面的标题来举例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;# 标题</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h3></blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表也是写文章最常用的，markdown中有有序、无序还有代办列表。</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表可以用星号(*)，加号(+)或者减号(-)作为列表标记。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*AAA</span><br><span class="line">+BBB</span><br><span class="line">-CCC</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>AAA</li>
</ul>
<ul>
<li>BBB</li>
</ul>
<ul>
<li>CCC</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表在数字后面加上英文的句号，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">2.</span><br><span class="line">3.</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li></li>
<li></li>
<li></li>
</ol>
<p>假如需要在列表项目里面加入引用，那么<strong>&gt;</strong>需要缩进：</p>
<ul>
<li><blockquote>
<p>这个是引用</p>
</blockquote>
</li>
</ul>
<ol>
<li><blockquote>
<p>这个也是引用</p>
</blockquote>
</li>
</ol>
<h3 id="待办列表"><a href="#待办列表" class="headerlink" title="待办列表"></a>待办列表</h3><p>这列表是带有可选框的。表示是否被勾选：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [x] 想女朋友</span><br><span class="line">- [x] 不惹女朋友生气</span><br><span class="line">- [ ] 不爱女朋友</span><br></pre></td></tr></table></figure>
<ul>
<li><input checked="" disabled="" type="checkbox"> 想女朋友</li>
<li><input checked="" disabled="" type="checkbox"> 惹女朋友生气</li>
<li><input disabled="" type="checkbox"> 不爱女朋友</li>
</ul>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在markdown中代码块是使用```将其包裹在其中的， 在围栏式代码块中，你可以在```后面指定指定语言标识，比如```java，这样代码就有高亮了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">"hello world!"</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>在markdown中，可以在文本前面使用 * 和  _  来表示斜体和加粗，加上一对是斜体，两对是加粗。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\*斜体\*</span><br><span class="line">\_斜体\_</span><br><span class="line">\_\_加粗\_\_</span><br><span class="line">\*\*加粗\*\*</span><br></pre></td></tr></table></figure>
<p><em>斜体</em><br><em>斜体</em><br><strong>加粗</strong><br><strong>加粗</strong></p>
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>markdown中链接用法是这样用的<a href="链接地址">你想要显示的文字</a>，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Teoan的博客](https:&#x2F;&#x2F;teoan.top)</span><br></pre></td></tr></table></figure>
<p><a href="https://teoan.top" target="_blank" rel="noopener">Teoan的博客</a></p>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>在markdown中使用表格的语法其实很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">First  | Second  | Third </span><br><span class="line">------- | ---------- | ---------</span><br><span class="line">First  | Second  | Third</span><br><span class="line">First  | Second  | Third</span><br><span class="line">First  | Second  | Third</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>First</th>
<th>Second</th>
<th>Third</th>
</tr>
</thead>
<tbody><tr>
<td>First</td>
<td>Second</td>
<td>Third</td>
</tr>
<tr>
<td>First</td>
<td>Second</td>
<td>Third</td>
</tr>
<tr>
<td>First</td>
<td>Second</td>
<td>Third</td>
</tr>
</tbody></table>
<p>还可以然表格中间居中(第二行冒号在哪边就向哪边对齐)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">First  | Second  | Third </span><br><span class="line">:------- | :----------: | ---------:	</span><br><span class="line">First  | Second  | Third</span><br><span class="line">First  | Second  | Third</span><br><span class="line">First  | Second  | Third</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">First</th>
<th align="center">Second</th>
<th align="right">Third</th>
</tr>
</thead>
<tbody><tr>
<td align="left">First</td>
<td align="center">Second</td>
<td align="right">Third</td>
</tr>
<tr>
<td align="left">First</td>
<td align="center">Second</td>
<td align="right">Third</td>
</tr>
<tr>
<td align="left">First</td>
<td align="center">Second</td>
<td align="right">Third</td>
</tr>
</tbody></table>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>markdown中的分割线是用<strong>—</strong>来实现的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分割线之上</span><br><span class="line">---</span><br><span class="line">分割线之下</span><br></pre></td></tr></table></figure>
<p>分割线之上</p>
<hr>
<p>分割线之下</p>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>markdown中插入图片的用法和链接差不多，![自定义文字](图片链接)，图片链接可以是本地图片的路径或者是网络链接:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![头像](https:&#x2F;&#x2F;i.imgur.com&#x2F;JVemOFZ.jpg)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/JVemOFZ.jpg" alt="头像"></p>
<hr>
<p>关于markdown常用的语法也就这些了，markdown还有很多好学又好用的功能，如果需要深入地了解markdown语法，可以参阅<a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">Markdowm 中文文档</a>。</p>
<p>本文参考文档：(<a href="https://coding.net/help/doc/project/markdown.html#i-3" target="_blank" rel="noopener">https://coding.net/help/doc/project/markdown.html#i-3</a>)</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>用GitHub Page+Hexo搭建个人博客</title>
    <url>/2018/08/28/%E7%94%A8GitHub%20Page+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于暑假在家极其容易咸鱼，对此在网上找了一些可以既可以花费时间去折腾又可以学到知识的东西，于是在知乎找到了这么一篇文章<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo搭建个人网站详细教程</a>,于是我花了一天的时间搭了一个属于自己的博客，用来记录一些琐碎的知识，还有自己在实践中遇到的一些坑，下面我会分享一下我搭个人博客所用到的资源和心得。</p>
<a id="more"></a>

<hr>
<h1 id="使用hexo搭博客遇到的问题"><a href="#使用hexo搭博客遇到的问题" class="headerlink" title="使用hexo搭博客遇到的问题"></a>使用hexo搭博客遇到的问题</h1><h2 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h2><p>博客搭建完之后，其实可以用xxxx.github.io来访问，xxxx为你的github用户名。当然很多小伙伴希望用自己的域名来访问博客，这个时候就需要去注册一个自己的域名了，我是通过<a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.1321.e9396d3ePP5wWY" target="_blank" rel="noopener">阿里云的万网</a>注册的,<img src="https://s1.ax1x.com/2018/09/06/iCn8VH.png" alt="Markdown">)<strong>类型A</strong>的记录值是你github仓库的ip地址，ip地址可以利用终端ping一下的你仓库域名(xxxx.github.io)获取,<strong>类型CNAME</strong>则是你github仓库的域名即 <em>xxxx.github.io</em>,设置完域名的解析和配置github仓库后，就可以如愿的通过域名访问博客了。<strong>需要注意的是，注册完域名一定要进行实名认证，这样域名才能够正常使用。</strong></p>
<hr>
<h2 id="关于hexo-live2d插件"><a href="#关于hexo-live2d插件" class="headerlink" title="关于hexo live2d插件"></a>关于hexo live2d插件</h2><p>博客搭好了，你可能会觉得你的博客有点单调，这个时候就可以利用live2d插件添加一个你喜欢的看板娘，看板娘的类型有很多，可以到<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">live2d插件作者的博客观摩</a>，配置live2d插件很简单，可以根据<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">live2d插件github</a>中的md进行配置，相信这些难不倒你。<br>如果你和我一样用的是<strong>next</strong>主题的话，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>
<p>以上配置应该是添加到Hexo的<strong>_config.yml</strong>文件，而不是主题的<strong>_config.yml</strong>文件。(我一开始添加到主题的配置文件中毫无作用。。。)<br>现在，看板娘已经出现在你的博客中了，如果你想了解更多live2d插件配置的属性可以参阅<a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" rel="noopener">live2d-widget.js API</a>。如果你想制作你自己的看板娘到自己的博客，可以参阅<a href="http://www.live2d.com/ja/" target="_blank" rel="noopener">live2d官网</a>和这两篇文章</p>
<ol>
<li><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-01" target="_blank" rel="noopener">给博客添加能动的看板娘(Live2D)-关于模型的二三事</a></li>
<li><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02" target="_blank" rel="noopener">给博客添加能动的看板娘(Live2D)-将其添加到网页上吧</a></li>
</ol>
<hr>
<h2 id="关于NexT主题"><a href="#关于NexT主题" class="headerlink" title="关于NexT主题"></a>关于NexT主题</h2><p>NexT主题是很多人的选择，其优点在于满足了大部分人对于简约的要求，同时又有许多子主题可供选择，还能结合第三方的插件进行使用，还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看：</p>
<ul>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官网</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT的github地址</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
</search>
